# -*- coding: utf-8 -*-
"""python all topics in practice project.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KlmfDZaQYDx1dyN5cta_5eLjryC0HmW6

SIMPLE PYTHON LEARNING PROJECT - EASY TO REVISE

A simple book store system covering all Python basics.
Each section is independent and easy to understand

......

1. VARIABLES, DATA TYPES & INPUT
"""

print("\n1. VARIABLES, DATA TYPES & INPUT")
print("-" * 50)

# Variables
book_name = "Python Guide"  # String
price = 299.99  # Float
quantity = 5  # Integer
is_available = True  # Boolean

print(f"Book: {book_name}")
print(f"Price: {price}")
print(f"Quantity: {quantity}")
print(f"Available: {is_available}")

# Type conversion
user_input = "10"
converted = int(user_input)
print(f"String '10' converted to int: {converted}, Type: {type(converted)}")

"""2. OPERATORS"""

a = 10
b = 3
print(f"10 + 3 = {a + b}")
print(f"10 - 3 = {a - b}")
print(f"10 * 3 = {a * b}")
print(f"10 / 3 = {a / b}")
print(f"10 // 3 = {a // b}")
print(f"10 % 3 = {a % b}")
print(f"10 ** 3 = {a ** b}")

# Comparison
print(f"\n10 > 3: {a > b}")
print(f"10 == 3: {a == b}")
print(f"10 != 3: {a != b}")

# Logical
x = True
y = False
print(f"\nTrue AND False: {x and y}")
print(f"True OR False: {x or y}")
print(f"NOT True: {not x}")

"""STRING MANIPULATION"""

text = "Python Programming"
print(f"Original: {text}")
print(f"Upper: {text.upper()}")
print(f"Lower: {text.lower()}")
print(f"Length: {len(text)}")
print(f"Replace: {text.replace('Python', 'Java')}")
print(f"Split: {text.split()}")
print(f"First 6 chars: {text[0:6]}")

# F-string formatting
author = "John"
year = 2024
print(f"\nAuthor: {author}, Year: {year}")

""" LIST"""

books = ["Python", "Java", "C++", "JavaScript"]
print(f"List: {books}")
print(f"First book: {books[0]}")
print(f"Last book: {books[-1]}")

# Add and remove
books.append("Go")
print(f"After append: {books}")

books.remove("Java")
print(f"After remove: {books}")

# Loop through list
print("Books:")
for book in books:
    print(f"  - {book}")

# List comprehension
book_prices = [100, 200, 150, 300]
doubled = [price * 2 for price in book_prices]
print(f"Doubled prices: {doubled}")

"""TUPLE"""

book_info = ("Python", 299.99, 2024, True)
print(f"Tuple: {book_info}")
print(f"Name: {book_info[0]}, Price: {book_info[1]}")

# Unpacking
name, price, year, available = book_info
print(f"Unpacked - Name: {name}, Year: {year}")

# Tuple is immutable
print(f"Tuple length: {len(book_info)}")
print(f"First element: {book_info[0]}")

"""SET"""

categories = {"Fiction", "Science", "History", "Science"}
print(f"Set (duplicates removed): {categories}")

# Add and remove
categories.add("Technology")
print(f"After add: {categories}")

categories.remove("History")
print(f"After remove: {categories}")

# Set operations
set1 = {1, 2, 3}
set2 = {3, 4, 5}
print(f"\nSet union: {set1 | set2}")
print(f"Set intersection: {set1 & set2}")
print(f"Set difference: {set1 - set2}")

"""DICTIONARY"""

student = {
    "name": "Ali",
    "age": 20,
    "gpa": 3.8,
    "courses": ["Python", "Web Dev"]
}

print(f'Student: {student}')
print(f"Name: {student['name']}, Age: {student['age']}")

student['City']='Dhaka'
student['Age']=21
print(f"After update: {student}")

for key, value in student.items():
    print(f"{key}: {value}")

# Dict comprehension
grades = {"Ali": 90, "Bob": 85, "Carol": 92}
doubled_grades = {name: score * 2 for name, score in grades.items()}
print(f"\nDoubled grades: {doubled_grades}")

"""CONDITIONAL LOGIC"""

age = 20
if age < 13:
    print("Child")
elif age < 18:
    print("Teenager")
else:
    print("Adult")

# Ternary operator
score = 85
result = "Pass" if score >= 50 else "Fail"
print(f"Score: {score}, Result: {result}")

# Multiple conditions
is_student = True
has_id = True
if is_student and has_id:
    print("Can borrow books")

"""LOOPS"""

# For loop
print("For loop:")
for i in range(1, 4):
    print(f"  Number: {i}")

# While loop
print("\nWhile loop:")
count = 0
while count < 3:
    print(f"  Count: {count}")
    count += 1

# Break and continue
print("\nBreak and continue:")
for i in range(5):
    if i == 2:
        continue  # Skip 2
    if i == 4:
        break  # Stop at 4
    print(f"  {i}")

"""COMPREHENSION"""

# List comprehension
squares = [x**2 for x in range(1, 6)]
print(f"Squares: {squares}")

# List comprehension with condition
even_numbers = [x for x in range(10) if x % 2 == 0]
print(f"Even numbers: {even_numbers}")

# Dict comprehension
student_scores = {f"Student{i}": i*10 for i in range(1, 4)}
print(f"Scores: {student_scores}")

# Set comprehension
unique_lengths = {len(word) for word in ["apple", "bat", "cat", "dog"]}
print(f"Unique word lengths: {unique_lengths}")

"""FUNCTIONS"""

def greet(name):
  return f'hello,{name}!'
print(greet('ap'))

# Function with default parameters
def calculate_total(price, quantity=1, tax=0.1):
    return price * quantity * (1 + tax)

print(f"Total: {calculate_total(100, 2)}")
print(f"Total with tax: {calculate_total(100, 2, 0.15)}")

# Function with multiple returns
def get_min_max(numbers):
    return min(numbers), max(numbers)

minimum, maximum = get_min_max([5, 2, 8, 1, 9])
print(f"Min: {minimum}, Max: {maximum}")

# Function with *args (variable arguments)
def add_all(*numbers):
    return sum(numbers)

print(f"Sum: {add_all(1, 2, 3, 4, 5)}")

# Function with **kwargs (keyword arguments)
def print_info(**kwargs):
    for key, value in kwargs.items():
        print(f"  {key}: {value}")

print("Student info:")
print_info(name="Ali", age=20, city="Dhaka")

""" FILE HANDLING"""

filename='book.txt'
with open(filename,'w') as file:
    file.write('Python Programming\n')
    file.write('Java Programming\n')

    print(f"File'{filename}'created")

# Read from file
with open(filename, "r") as file:
    content = file.read()
    print(f"Content:\n{content}")

# Read line by line
print("Reading line by line:")
with open(filename, "r") as file:
    for line in file:
        print(f"  {line.strip()}")
# Append to file
with open(filename, "a") as file:
    file.write("JavaScript\n")

print(f"✓ Appended to '{filename}'")


# Clean up
import os
if os.path.exists(filename):
    os.remove(filename)
    print(f"✓ File '{filename}' deleted")

"""ERROR HANDLING"""

# Try-except
try:
    age = int("twenty")
except ValueError:
    print("✗ Invalid input: cannot convert string to int")

# Multiple exceptions
try:
    numbers = [1, 2, 3]
    result = numbers[10] / 0
except IndexError:
    print("✗ Index out of range")
except ZeroDivisionError:
    print("✗ Cannot divide by zero")
except Exception as e:
    print(f"✗ Error: {e}")

# Try-except-else-finally
try:
    age = int("25")
    print(f"✓ Valid age: {age}")
except ValueError:
    print("✗ Invalid age")
else:
    print("No error occurred")
finally:
    print("This always runs")

"""CLASSES & OBJECTS"""

class Book:
  total_books = 0

  def __init__(self, title, author, price):
    self.title = title
    self.author = author
    self.price = price
    Book.total_books += 1

    # Method
    def display_info(self):
        print(f"Title: {self.title}")
        print(f"Author: {self.author}")
        print(f"Price: ${self.price}")

     # Another method
    def apply_discount(self, discount_percent):
        return self.price * (1 - discount_percent / 100)

   # Create objects
    book1 = Book("Python 101", "John", 499)
    book2 = Book("Web Development", "Sarah", 399)


    print("Book 1:")
    book1.display_info()
    print(f"Price after 10% discount: ${book1.apply_discount(10)}")

    print(f"\nTotal books created: {Book.total_books}")

"""INHERITANCE"""

class Item:
    def __init__(self, name, price):
        self.name = name
        self.price = price

    def show_price(self):
        return f"{self.name}: ${self.price}"

class Digital(Item):
    def __init__(self, name, price, file_size):
        super().__init__(name, price)
        self.file_size = file_size

    def show_price(self):
        return f"{self.name}: ${self.price} (File size: {self.file_size}MB)"

# Use inheritance
physical_book = Item("Book", 299)
ebook = Digital("E-Book", 99, 5)

print(physical_book.show_price())
print(ebook.show_price())

"""ITERATORS & GENERATORS"""

def count_up_to(n):
  count =1
  while count <= n:
    yield count
    count += 1

counter = count_up_to(5)
for num in counter:
  print(num)



# Generator with list
numbers_gen = (x * 2 for x in range(1, 6))
print(f"\nGenerator: {list(numbers_gen)}")

"""MAGIC METHODS"""

class Student:
    def __init__(self, name, gpa):
        self.name = name
        self.gpa = gpa

    # __str__ - string representation
    def __str__(self):
        return f"Student: {self.name}"

    # __repr__ - developer representation
    def __repr__(self):
        return f"Student('{self.name}', {self.gpa})"

    # __len__ - length
    def __len__(self):
        return int(self.gpa)

    # __eq__ - equality
    def __eq__(self, other):
        return self.name == other.name if isinstance(other, Student) else False

    # __lt__ - less than
    def __lt__(self, other):
        return self.gpa < other.gpa if isinstance(other, Student) else False

student1 = Student("Ali", 3.8)
student2 = Student("Bob", 3.5)

print(str(student1))
print(repr(student1))
print(f"Length (GPA as int): {len(student1)}")
print(f"Ali == Ali: {student1 == Student('Ali', 3.8)}")
print(f"Ali GPA < Bob GPA: {student1 < student2}")

"""MODULES & PACKAGES"""

import datetime
import math
import random

# Datetime module
today = datetime.date.today()
print(f"Today: {today}")
print(f"Day: {today.day}, Month: {today.month}, Year: {today.year}")

# Math module
print(f"\nSquare root of 16: {math.sqrt(16)}")
print(f"Power (2^3): {math.pow(2, 3)}")
print(f"Pi: {math.pi}")

# Random module
print(f"Random number (1-10): {random.randint(1, 10)}")
print(f"Random choice: {random.choice(['Python', 'Java', 'C++'])}")

"""DECORATORS"""

def my_decorator(func):
    def wrapper():
        print("Before the function")
        func()
        print("After the function")
    return wrapper

@my_decorator
def greet():
    print("Hello, world!")

greet()

# Decorator with parameters
def repeat(times):
    def decorator(func):
        def wrapper(*args):
            for _ in range(times):
                func(*args)
        return wrapper
    return decorator

@repeat(3)
def greet(name):
    print(f"  Hi {name}!")

greet("Ali")

"""REGULAR EXPRESSIONS"""

import re

text = "Email: ali@gmail.com, Phone: 01912345678"

# Find all emails
emails = re.findall(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', text)
print(f"Emails found: {emails}")

# Find all numbers
numbers = re.findall(r'\d+', text)
print(f"Numbers found: {numbers}")

# Replace
new_text = re.sub(r'\d+', 'XXX', text)
print(f"After replacement: {new_text}")

# Check if email is valid
email = "test@example.com"
pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
is_valid = bool(re.match(pattern, email))
print(f"\nEmail '{email}' is valid: {is_valid}")